package com.luv2code.springboot.cruddemo.security;

import java.util.List;

import org.apache.coyote.http11.Http11InputBuffer;
import org.springframework.boot.autoconfigure.amqp.CachingConnectionFactoryConfigurer;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.csrf.CsrfAuthenticationStrategy;

import jakarta.servlet.Filter;
import jakarta.servlet.http.HttpServletRequest;


@Configuration
public class DemoSecurityConfig {

	@Bean
	public InMemoryUserDetailsManager userDetailsManager() {
		
		UserDetails john = User.builder()
				.username("john")
				.password("{noop}test123")
				.roles("EMPLOYEE")
				.build();
		
        UserDetails mary = User.builder()
                .username("mary")
                .password("{noop}test123")
                .roles("EMPLOYEE", "MANAGER")
                .build();

        UserDetails susan = User.builder()
                .username("susan")
                .password("{noop}test123")
                .roles("EMPLOYEE", "MANAGER", "ADMIN")
                .build();
        
        return new InMemoryUserDetailsManager(john,mary,susan);
				
	}
	
	@Bean
	public SecurityFilterChain filterChain(HttpSecurity http) throws Exception{
		
		http.authorizeHttpRequests(configurer -> 
		     configurer
		         .requestMatchers(HttpMethod.GET,"/api/employees").hasAnyRole("EMPLOYEE")
		         .requestMatchers(HttpMethod.GET,"/api/employees/**").hasAnyRole("EMPLOYEE")
		         .requestMatchers(HttpMethod.POST,"/api/employees").hasAnyRole("MANAGER")
		         .requestMatchers(HttpMethod.PUT,"/api/employees").hasAnyRole("MANAGER")
		         .requestMatchers(HttpMethod.DELETE,"/api/employees/**").hasAnyRole("ADMIN")
		       
		);
		

        // use HTTP Basic authentication
        http.httpBasic(Customizer.withDefaults());

        // disable Cross Site Request Forgery (CSRF)
        // in general, not required for stateless REST APIs that use POST, PUT, DELETE and/or PATCH
        http.csrf(csrf -> csrf.disable());
        
        return http.build();
		
	}
	
}
